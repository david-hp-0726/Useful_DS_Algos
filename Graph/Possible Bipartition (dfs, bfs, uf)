class Solution {
    /*
        uf
    */
    public boolean possibleBipartition(int n, int[][] dislikes) {
        List<Integer>[] adj = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            adj[i] = new ArrayList<>();
        }

        for (int[] edge : dislikes) {
            int source = edge[0];
            int dest = edge[1];

            adj[source].add(dest);
            adj[dest].add(source);
        }

        UF uf = new UF(n + 1);
        for (int node = 1; node <= n; node++) {
            // skip isolated nodes
            if (adj[node].isEmpty()) {
                continue;
            }
            int root = uf.getRoot(node);
            int neighbor1Root = uf.getRoot(adj[node].get(0));
            
            for (int neighbor : adj[node]) {
                if (root == uf.getRoot(neighbor)) {
                    return false;
                }

                uf.union(neighbor, neighbor1Root);
            }
        }

        return true;
    }

    private class UF {
        int[] roots;
        int[] weights;
        int size;

        public UF (int size) {
            this.size = size;
            roots = new int[size];
            weights = new int[size];
            Arrays.fill(weights, 1);
            
            for (int i = 0; i < size; i++) {
                roots[i] = i;
            }
        }

        public int getRoot(int idx) {
            // while implementation
            // while (idx != roots[idx]) {
            //     roots[idx] = roots[roots[idx]];
            //     idx = roots[idx];
            // }
            
            // recursion
            if (idx != roots[idx]) {
                roots[idx] = getRoot(roots[idx]);
            }
            return roots[idx];
        }

        public void union(int idx1, int idx2) {
            int root1 = getRoot(idx1), root2 = getRoot(idx2);

            if (root1 == root2) {
                return;
            }
            else if (weights[root1] < weights[root2]) {
                roots[root1] = root2;
                weights[root2] += weights[root1];
            }
            else {
                roots[root2] = root1;
                weights[root1] += weights[root2];
            }
        }
    }


    /*
        dfs
    */
    public boolean possibleBipartition1(int n, int[][] dislikes) {
        List<Integer>[] adj = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            adj[i] = new ArrayList<>();
        }

        for (int[] edge : dislikes) {
            int source = edge[0];
            int dest = edge[1];

            adj[source].add(dest);
            adj[dest].add(source);
        }

        // -1 = unvisited, 0 = blue, 1 = red
        int[] color = new int[n + 1];
        Arrays.fill(color, -1);
        for (int node = 1; node <= n; node++) {
            if (color[node] != -1) {
                continue;
            }
            
            color[node] = 0;

            if (!dfs(node, adj, color)) {
                return false;
            } 
        }

        return true;
    }

    private boolean dfs(int node, List<Integer>[] adj, int[] color) {
        for (int next : adj[node]) {
            if (color[next] == -1) {
                color[next] = 1 - color[node];
                
                if (!dfs(next, adj, color)) {
                    return false;
                }
            }
            else if (color[next] == color[node]) {
                return false;
            }
        }

        return true;
    }

    /*
        bfs
    */
    public boolean possibleBipartition2(int n, int[][] dislikes) {
        List<Integer>[] adj = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            adj[i] = new ArrayList<>();
        }

        for (int[] edge : dislikes) {
            int source = edge[0];
            int dest = edge[1];

            adj[source].add(dest);
            adj[dest].add(source);
        }

        Queue<Integer> bfs = new ArrayDeque<>();;
        int[] color = new int[n + 1];
        Arrays.fill(color, -1);
        for (int i = 1; i <= n; i++) {
            if (color[i] != -1) {
                continue;
            }

            bfs.add(i);
            color[i] = 0;

            while (!bfs.isEmpty()) {
                int node = bfs.remove();

                for (int next : adj[node]) {
                    if (color[next] == -1) {
                        color[next] = 1 - color[node];
                        bfs.add(next);
                    }
                    else if (color[next] == color[node]) {
                        return false;
                    }
                }
            }
        }

        return true;
    }
}
