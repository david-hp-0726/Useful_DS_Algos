class WordDictionary {

    private class TrieNode {
        TrieNode[] next;
        boolean isWord;

        public TrieNode() {
            next = new TrieNode[26];
            isWord = false;
        }

        private void insert(char c) {
            if (next[c - 'a'] == null) {
                next[c - 'a'] = new TrieNode();
            }
        }
    }

    TrieNode root;

    public WordDictionary() {
        root = new TrieNode();
    }
    
    public void addWord(String word) {
        TrieNode curr = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            curr.insert(c);
            curr = curr.next[c - 'a'];
        }
        curr.isWord = true;
    }
    
    public boolean search(String word) {
        return search(word.toCharArray(), 0, root);
    }

    private boolean search(char[] charArr, int index, TrieNode curr) {
        char c = charArr[index];
        
        // base case: check if the current index is word
        if (index == charArr.length - 1 && c == '.') {
            for (int i = 0; i < 26; i++) {
                if (curr.next[i] != null && curr.next[i].isWord) {
                    return true;
                }
            }
            return false;
        }
        else if (index == charArr.length - 1) {
            return curr.next[c - 'a'] != null && curr.next[c - 'a'].isWord;
        }

        // regular case:
        // if current node is a dot, we need to exhaustively check
        // all possible next nodes
        if (c == '.') {
            for (int i = 0; i < 26; i++) {
                if (curr.next[i] != null && search(charArr, index + 1, curr.next[i])) {
                    return true;
                }
            }
            return false;
        }
        else {
            return curr.next[c - 'a'] != null && search(charArr, index + 1, curr.next[c - 'a']);
        }
    }
}
