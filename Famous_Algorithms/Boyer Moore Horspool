
class Program {
  public static boolean knuthMorrisPrattAlgorithm(String string, String pattern) {
    int[] bmt = new int[128];
    int n = string.length(), m = pattern.length();
    Arrays.fill(bmt, m); // if we run into any bad characters we skip by m

    // build bad match table by storing the last occurrence of each
    // character (except for the last charcter)
    for (int i = 0; i < m - 1; i++) {
      char c = pattern.charAt(i);
      bmt[c] = m - i - 1;
    }

    int index = m - 1;
    while (index < n) {
      int str_idx = index;
      int pat_idx = m - 1;
      while (pat_idx >= 0 && string.charAt(str_idx) == pattern.charAt(pat_idx)) {
        str_idx--;
        pat_idx--;
      }

      // if we are able to match every single character in pattern
      if (pat_idx == -1) {
        return true;
      }

      // otherwise shift our pattern ahead according to the bmt
      char badChar = string.charAt(index);
      index += bmt[badChar];
    }
    
    return false;
  }
}
