class Solution {
    /*
        Backtracking Solution 1: inserting subsets while moving down the array
        time: 2^n * n^2
        2^n: number of possible subsequences
        n: inserting a sequence into a hashset
        n: the length of each sequence 

        space: 2^n * n
        2^n: number of possible subsequences
        n: the length of each sequence 
    */
    private List<List<Integer>> subsets = new ArrayList<>();
    private List<Integer> subset = new ArrayList<>();

    public List<List<Integer>> findSubsequences(int[] nums) {
        dp(nums, 0);
        return subsets;
    }

    private void dp(int[] nums, int idx) {
        if (subset.size() >= 2) {
            subsets.add(new ArrayList<>(subset));
        }

        Set<Integer> added = new HashSet<>();
        for (int i = idx; i < nums.length; i++) {
            // skip duplicate elements or elements that break the sequence
            if ((subset.size() > 0 && subset.get(subset.size() - 1) > nums[i]) || added.contains(nums[i])) {
                continue;
            }

            subset.add(nums[i]);
            added.add(nums[i]);
            dp(nums, i + 1);
            subset.remove(subset.size() - 1);
        }
    }

    /*
        Backtracking Solution 2: inserting elements until we reach the end of the array
    */
    // private Set<List<Integer>> subsets = new HashSet<>();
    // private List<Integer> subset = new ArrayList<>();

    // public List<List<Integer>> findSubsequences(int[] nums) {
    //     dp(nums, 0);

    //     // put all valid subsets into our solution set
    //     List<List<Integer>> res = new ArrayList<>();
    //     for (List<Integer> sol : subsets) {
    //         res.add(sol);
    //     }

    //     return res;
    // }

    // private void dp(int[] nums, int idx) {
    //     if (idx == nums.length) {
    //         if (subset.size() >= 2) {
    //             subsets.add(new ArrayList<>(subset));
    //         }
    //         return;
    //     }

    //     // try adding the current value into our subset, IF AND ONLY IF
    //     // the current value creates a non-decreasing sequence
    //     if (subset.isEmpty() || subset.get(subset.size() - 1) <= nums[idx]) {
    //         subset.add(nums[idx]);
    //         dp(nums, idx + 1);
    //         subset.remove(subset.size() - 1);
    //     }

    //     // try not including the current value into our subset
    //     dp(nums, idx + 1);
    // }

    /*
        Solution 3: bit masking
    */
    public List<List<Integer>> findSubsequences(int[] nums) {
        // enumerate all possible subsequences
        Set<List<Integer>> res = new HashSet<>();
        int n = nums.length;
        int maxNumSeq = (1 << n) - 1;

        for (int i = 1; i <= maxNumSeq; i++) {
            List<Integer> sequence = new ArrayList<>();
            int bitmask = 1; 

            for (int j = 0; j < n; j++) {
                if ((bitmask & i) > 0) {
                    sequence.add(nums[j]);
                }
                bitmask <<= 1;
            }

            if (sequence.size() < 2) {
                continue;
            }

            boolean isIncreasing = true;
            for (int j = 0; j < sequence.size() - 1; j++) {
                isIncreasing &= sequence.get(j) <= sequence.get(j + 1);
            }

            if (isIncreasing) {
                res.add(sequence);
            }
        }

        List<List<Integer>> sequences = new ArrayList<>();
        for (List<Integer> sequence : res) {
            sequences.add(sequence);
        }

        return sequences;
    }
}
