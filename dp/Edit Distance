class Solution {
    public int minDistance(String word1, String word2) {
        // Step 1: initializing variables
        int len1 = word1.length();
        int len2 = word2.length();
        int[][] memo = new int[len1 + 1][len2 + 1];
        for (int i = 0; i <= len1; i++) {
            memo[i][0] = i;
        }
        for (int i = 0; i <= len2; i++) {
            memo[0][i] = i;
        }

        // Step 2: dp
        for (int i = 1; i <= len1; i++) {
            char char1 = word1.charAt(i - 1);
            for (int j = 1; j <= len2; j++) {
                char char2 = word2.charAt(j - 1);

                // Option 1: Delete and reduce problem to dp(i - 1, j);
                int delete = memo[i - 1][j] + 1;

                // Option 2: Insert and reduce problem to dp(i, j - 1);
                // This is tricky to understand, but essentially
                // inserting a letter cancels out a letter in word 2.
                // EX: 
                // word1 = ac       word2 = ab
                // insert b
                // word1 = abc      word1 = ab
                // b cancels out, and the problem is reduced to
                // word1 = ac       word2 = a
                int insert = memo[i][j - 1] + 1;

                // Option 3: Replace and reduce problem to dp(i - 1, j);
                int replace = memo[i - 1][j - 1] + 1;
                if (char1 == char2) {
                    // If char1 already equals char2, then 
                    // replacement doesn't cost anything
                    replace--;
                }

                memo[i][j] = Math.min(delete, Math.min(insert, replace));
            }
        }

        return memo[len1][len2];
    }
}
