class Solution {
    public int maxDistance(int[][] grid) {
        int nrows = grid.length;
        int ncols = grid[0].length;
        int MAX_DISTANCE = nrows + ncols + 1;

        // compute distances to nearest land from left and top
        for (int i = 0; i < nrows; i++) {
            for (int j = 0; j < ncols; j++) {
                if (grid[i][j] == 1) {
                    // if cell is land
                    grid[i][j] = 0;
                }
                else {
                    // if cell is water
                    grid[i][j] = MAX_DISTANCE;

                    int top = (i > 0) ? grid[i - 1][j] + 1 : MAX_DISTANCE;
                    int left = (j > 0) ? grid[i][j - 1] + 1 : MAX_DISTANCE;

                    grid[i][j] = Math.min(grid[i][j], Math.min(top, left));
                }
            }
        }

        // compute distances to nearest land from right, while keeping
        // track of the max of these distances
        int res = -1;
        for (int i = nrows - 1; i >= 0; i--) {
            for (int j = ncols - 1; j >= 0; j--) {
                int bottom = (i < nrows - 1) ? grid[i + 1][j] + 1 : MAX_DISTANCE;
                int right = (j < ncols - 1) ? grid[i][j + 1] + 1 : MAX_DISTANCE;

                grid[i][j] = Math.min(grid[i][j], Math.min(bottom, right));
                res = Math.max(res, grid[i][j]);
            }
        }

        return (res != 0 && res != MAX_DISTANCE) ? res : -1;
    }
}
