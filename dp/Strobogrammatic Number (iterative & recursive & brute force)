class Solution {
    /*
        Recursion
        time: n * 5^(n/2)
        We will have a decision tree with N/2 layers, where each layer we are
        adding a maximum of 5 branches, giving us O(N * 5^(N/2))
        N -> N-2 -> N-4 ... 0
        space: n * 5^(n/2)
    */
    char[][] reversiblePairs = new char[][] {
        {'0', '0'}, {'1', '1'}, {'6', '9'}, {'9', '6'}, {'8', '8'}
    };
    public List<String> findStrobogrammatic1(int n) {
        return findReversiblePairs(n, n);
    }

    private List<String> findReversiblePairs(int n, int finalLength) {
        if (n == 0) {
            return new ArrayList<>(List.of(""));
        }

        if (n == 1) {
            return new ArrayList<>(List.of("0", "1", "8"));
        }

        List<String> prevPairs = findReversiblePairs(n - 2, finalLength);
        List<String> currPairs = new ArrayList<>();

        for (String prev : prevPairs) {
            for (char[] pair : reversiblePairs) {
                if (n != finalLength || pair[0] != '0') {
                    String curr = pair[0] + prev + pair[1];
                    currPairs.add(curr);
                }
            }
        }

        return currPairs;
    }

    /*
        Iteration
        time: n * 5^(n/2)
        space: n * 5^(n/2)
    */
    public List<String> findStrobogrammatic(int n) {
        if (n == 1) {
            return new ArrayList<>(List.of("0", "1", "8"));
        }

        List<String> res = new ArrayList<>();
        Queue<String> queue = new ArrayDeque<>();
        int numIterations = n / 2;
        if (n % 2 != 0) {
            queue.add("0");
            queue.add("1");
            queue.add("8");
        }
        else {
            queue.add("");
        }

        char[][] reversiblePairs = new char[][] {
            {'0', '0'}, {'1', '1'}, {'6', '9'}, {'9', '6'}, {'8', '8'}
        };
        for (int i = 0; i < numIterations; i++) {
            int queueSize = queue.size();
            for (int j = 0; j < queueSize; j++) {
                String prev = queue.remove();

                for (char[] pair : reversiblePairs) {
                    if (i != numIterations - 1 || pair[0] != '0') {
                        queue.add(pair[0] + prev + pair[1]);
                    }
                }
            }
        }
        
        while (!queue.isEmpty()) {
            res.add(queue.poll());
        }
        return res;
    }

    /*
        Brute Force 
        time: n * 10^n
        space: 1
    */
    public List<String> findStrobogrammatic2(int n) {
        Map<Character, Character> flipMap = new HashMap<>();
        flipMap.put('0', '0');
        flipMap.put('1', '1');
        flipMap.put('6', '9');
        flipMap.put('9', '6');
        flipMap.put('8', '8');

        int startVal = (n == 1) ? 0 : (int) Math.pow(10, n - 1);
        int endVal = (int) Math.pow(10, n) - 1;
        List<String> res = new ArrayList<>();
        for (int val = startVal; val <= endVal; val++) {
            String str = "" + val;
            int left = 0, right = str.length() - 1;

            while (left <= right) {
                char leftChar = str.charAt(left);
                char rightChar = str.charAt(right);
                if (!flipMap.containsKey(leftChar) || !flipMap.containsKey(rightChar)) {
                    break;
                }
                if (flipMap.get(leftChar) == rightChar && flipMap.get(rightChar) == leftChar) {
                    left++;
                    right--;
                }
                else {
                    break;
                }

                if (left > right) {
                    res.add(str);
                }
            }
        }

        return res;
    }
}
