class Solution {
    /*
        dfs
    */
    public String alienOrder(String[] words) {
        Map<Character, List<Character>> adj = new HashMap<>();
        int numChars = 0;
        for (String word : words) {
            for (char c : word.toCharArray()) {
                adj.putIfAbsent(c, new ArrayList<>());
                numChars++;
            }
        }

        for (int i = 0; i < words.length - 1; i++) {
            String word1 = words[i], word2 = words[i + 1];
            int len1 = word1.length(), len2 = word2.length();

            if (len1 > len2 && word1.startsWith(word2)) {
                return "";
            }

            int p1 = 0, p2 = 0;
            while (p1 < len1 && p2 < len2) {
                char c1 = word1.charAt(p1++), c2 = word2.charAt(p2++);

                if (c1 != c2) {
                    adj.get(c2).add(c1);
                    break;
                }
            }
        }

        StringBuilder res = new StringBuilder();
        // 0 = yet to visit, 1 = visited, 2 = added to solution
        int[] visited = new int[26];

        for (char c : adj.keySet()) {
            if (!dfs(adj, visited, c, res)) {
                return "";
            }
        }

        return res.toString();
    }

    private boolean dfs(Map<Character, List<Character>> adj, int[] visited, char node, StringBuilder res) {
        // cycle detection
        if (visited[node - 'a'] == 1) {
            return false;
        }

        if (visited[node - 'a'] == 2) {
            return true;
        }

        visited[node - 'a'] = 1;
        
        for (char next : adj.get(node)) {
            if (!dfs(adj, visited, next, res)) {
                return false;
            }
        }

        visited[node - 'a'] = 2;
        res.append(node);
        return true;
    }

    /*
        bfs
    */
    public String alienOrder2(String[] words) {
        // initialize adjacency list
        List<Character>[] adj = new ArrayList[26];
        int[] deg = new int[26];
        Arrays.fill(deg, -1);
        int numChars = 0;
        
        for (String word : words) {
            for (char c : word.toCharArray()) {
                if (adj[c - 'a'] == null) {
                    adj[c - 'a'] = new ArrayList<>();
                    deg[c - 'a'] = 0;
                    numChars++;
                }
            }
        }
        
        // building the adjacency list
        for (int i = 0; i < words.length - 1; i++) {
            String word1 = words[i], word2 = words[i + 1];
            int len1 = word1.length(), len2 = word2.length();
            
            // check if word2 is a prefix of word1
            if (len1 > len2 && word1.startsWith(word2)) {
                return "";
            }
            
            // find the first differing character of the two words
            int p1 = 0, p2 = 0;
            while (p1 < len1 && p2 < len2) {
                char c1 = word1.charAt(p1++), c2 = word2.charAt(p2++);
                if (c1 != c2) {
                    adj[c1 - 'a'].add(c2);
                    deg[c2 - 'a']++;
                    break;
                }
            }
        }
        
        Queue<Character> bfs = new ArrayDeque<>();
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < 26; i++) {
            if (deg[i] == 0) {
                bfs.add((char) ('a' + i));
            }
        }
        
        // notice if there is a cycle, we can't get to characters
        while (!bfs.isEmpty()) {
            char curr = bfs.remove();
            res.append(curr);
            
            for (char next : adj[curr - 'a']) {
                deg[next - 'a']--;
                
                if (deg[next - 'a'] == 0) {
                    bfs.add(next);
                }
            }
        }

        return (res.length() == numChars) ? res.toString() : "";
    }
    
}
