class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;

        if (n <= 1) {
            return 0;
        }

        Map<Integer, List<Integer>> adj = new HashMap<>();
        for (int i = 0; i < n; i++) {
            // equivalent of 
            // adj.putIfAbsent(arr[i], new ArrayList<>()) + adj.get(arr[i]).add(i);
            adj.computeIfAbsent(arr[i], v -> new ArrayList<>()).add(i);
        }

        Set<Integer> small = new HashSet<>(), big = new HashSet<>();
        boolean[] visited = new boolean[n];
        small.add(0);
        big.add(n - 1);
        visited[0] = true;
        visited[n - 1] = true;
        int count = 0;

        while (!small.isEmpty()) {
            // we always search the side whose current layer
            // contains less nodes
            if (big.size() < small.size()) {
                Set<Integer> temp = small;
                small = big; 
                big = temp;
            }

            Set<Integer> next = new HashSet<>();

            // for each node in the current layer, check if the two sides
            // are connected
            for (int node : small) {
                // check nodes with the same value
                if (adj.containsKey(arr[node])) {
                    for (int bro : adj.get(arr[node])) {
                        if (bro != node && big.contains(bro)) {
                            return count + 1;
                        }
                        else if (!visited[bro]) {
                            visited[bro] = true;
                            next.add(bro);
                        }
                    }
                    
                    // now that we've checked all nodes with the same value
                    // we can clear the list to prevent redundant search
                    adj.get(arr[node]).clear();
                }

                // check neighbors
                if (node + 1 < n && big.contains(node + 1)) {
                    return count + 1;
                }
                else if (node + 1 < n && !visited[node + 1]) {
                    visited[node + 1] = true;
                    next.add(node + 1);
                }

                if (node - 1 >= 0 && big.contains(node - 1)) {
                    return count + 1;
                }
                else if (node - 1 >= 0 && !visited[node - 1]){
                    visited[node - 1] = true;
                    next.add(node - 1);
                }
                
            }

            small = next;
            count++;
        }

        return count;
    }
}