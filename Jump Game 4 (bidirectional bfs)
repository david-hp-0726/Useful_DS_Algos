class Solution {
    public int minJumps(int[] arr) {
        // Corner Case: if the array contains only one element
        if (arr.length == 1) {
            return 0;
        }

        // Step 1: Map each unique value to the matching index
        int n = arr.length;
        Map<Integer, List<Integer>> sameVals = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int num = arr[i];
            sameVals.computeIfAbsent(num, v -> new ArrayList<>()).add(i);
        }

        // Step 2: Bidirectional bfs; initialize two queues; in each iteration
        //          search the smaller queue
        Set<Integer> small = new HashSet<>(), big = new HashSet<>();
        boolean[] visited = new boolean[n];
        small.add(0);
        big.add(n - 1);
        visited[0] = visited[n - 1] = true;

        int numJumps = 0;
        while (!small.isEmpty()) {
            if (small.size() > big.size()) {
                Set<Integer> temp = big;
                big = small;
                small = temp;
            }

            Set<Integer> nextSmall = new HashSet<>();

            for (int idx : small) {
                // add all indices with the same value
                for (int nextIdx : sameVals.get(arr[idx])) {
                    if (big.contains(nextIdx)) {
                        return numJumps + 1;
                    }

                    if (nextIdx != idx && !visited[nextIdx]) {
                        visited[nextIdx] = true;
                        nextSmall.add(nextIdx);
                    }
                }

                sameVals.get(arr[idx]).clear();

                // add left neighbor if any
                if (idx > 0 && big.contains(idx - 1)) {
                    return numJumps + 1;
                }
                else if (idx > 0 && !visited[idx - 1]) {
                    visited[idx - 1] = true;
                    nextSmall.add(idx - 1);
                }

                // add right neighbor if any
                if (idx < n - 1 && big.contains(idx + 1)) {
                    return numJumps + 1;
                }
                else if (idx < n - 1 && !visited[idx + 1]) {
                    visited[idx + 1] = true;
                    nextSmall.add(idx + 1);
                }
            }

            small = nextSmall;
            numJumps++;
        }

        return numJumps;
    }
}
