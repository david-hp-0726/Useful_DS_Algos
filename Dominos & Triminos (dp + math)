class Solution {
    /* 
        Iterative DP
    */
    class Solution {
        public int numTilings(int n) {
            if (n <= 2) {
                return n;
            }
            long curr = 2;
            long prev = 1;
            long partial = 1;

            // f(n) = f(n - 1) + f(n - 2) + 2 * p(n - 1)
            //      = f(n - 1) + f(n - 2) + 2 * (p(n - 3) + f(n - 2))
            for (int i = 3; i <= n; i++) {
                long temp = curr;
                curr = (curr + prev + partial * 2) % 1_000_000_007;
                partial = (prev + partial) % 1_000_000_007;
                prev = temp;
            }

            return (int) curr;
        }
    }
    
    /* 
        Recursive DP
    */
    Map<Integer, Long> cacheP = new HashMap<>();
    Map<Integer, Long> cacheF = new HashMap<>();

    public int numTilings(int n) {
        return (int) (full(n));
    }

    private long full(int n) {
        if (cacheF.containsKey(n)) {
            return cacheF.get(n);
        }

        if (n < 1) {
            return 0;
        }

        if (n == 1) {
            return 1L;
        }

        if (n == 2) {
            return 2L;
        }

        long res = (full(n - 1) + full(n - 2) + 2 * partial(n - 1)) % 1_000_000_007;
        cacheF.put(n, res);
        return res;
    }

    private long partial(int n) {
        if (cacheP.containsKey(n)) {
            return cacheP.get(n);
        }

        if (n < 2) {
            return 0;
        }

        if (n == 2) {
            return 1;
        }

        long res = (partial(n - 1) + full(n - 2)) % 1_000_000_007;
        cacheP.put(n, res);
        return res;
    }
}
