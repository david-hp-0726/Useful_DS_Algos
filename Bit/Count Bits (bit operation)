public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        // solution 1: counting bits (32)
        int count = 0;
        int bitPos = 1;
        for (int i = 0; i < 32; i++) {
            if ((n & bitPos) != 0) {
                count++;
            }
            bitPos <<= 1;
        }

        return count;

        // solution 2: bit operation (number of ones)
        // Example with 63:
        // 63 (111111) & 62 (111110) = 63 - 1 = 62 (111110) 
        // 62 (111110) & 61 (111101) = 62 - 2 = 60 (111100)
        // 60 (111100) & 59 (111011) = 60 - 4 = 56 (111000)
        // 56 (111000) & 55 (110111) = 56 - 8 = 48 (110000)
        // 48 (111000) & 47 (110111) = 48 - 16 = 32 (100000)
        // 32 (100000) & 31 (011111) = 32 - 32 = 0 (000000)

        // Basically, we are breaking n down to a sequence of powers of 2
        // while taking advantage of the fact that if we subtract one from
        // any number n, we can get rid of the rightmost 1 in its bit
        int count = 0;
        while (n != 0) {
            count++;
            n = n & (n - 1);
        }
        return count;
    }
}
