class Solution {
    public boolean closeStrings(String word1, String word2) {
        // condition 1: the lengths have to match
        if (word1.length() != word2.length()) {
            return false;
        }

        int[] map1 = new int[26];
        int[] map2 = new int[26];
        int bit1 = 0;
        int bit2 = 0;

        for (char c : word1.toCharArray()) {
            map1[c - 'a']++;

            // lets say c is the letter 'b', if the current bit at index 0 is empty,
            // the following operation is going to union the current bit with
            // the bit '...010', thus ensuring a 1 is placed at the index 
            // corresponding to 'b'
            bit1 = bit1 | (1 << (c - 'a'));
        }

        for (char c : word2.toCharArray()) {
            map2[c - 'a']++;
            bit2 = bit2 | (1 << (c - 'a'));
        }

        // condition 2: the two words have to have the same unique characters
        if (bit1 != bit2) {
            return false;
        }

        // condition 3: the overall frequency list of unique characters have to 
        //              match, though individual characters that are the same can 
        //              different frequencies, since we can always swap frequencies
        Arrays.sort(map1);
        Arrays.sort(map2);
        for (int i = 0; i < 26; i++) {
            if (map1[i] != map2[i]) {
                return false;
            }
        }

        return true;
    }
}
