class Solution {
    public int singleNumber(int[] nums) {
        /*
            HashMap Solution
        */
        // Map<Integer, Integer> countMap = new HashMap<>();
        // for (int num : nums) {
        //     countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        // }

        // for (int key : countMap.keySet()) {
        //     if (countMap.get(key) == 1) {
        //         return key;
        //     }
        // }

        // return 0;

        /*
            Math Solution
        */
        // 2 * (a + b + c) - (a + a + b + b + c) = c
        Set<Integer> set = new HashSet<>();
        int sumOfUniqueNums = 0;
        int sumOfArray = 0;

        for (int num : nums) {
            if (!set.contains(num)) {
                set.add(num);
                sumOfUniqueNums += num;
            }
            sumOfArray += num;
        }

        return 2 * sumOfUniqueNums - sumOfArray;

        /*
            Bit Operation
        */
        // If a pair of bits are the same, 'xor' sets them to 0.
        // If a pair of bits are different, 'xor' sets them to 1.
        // 10 xor 0 = a
        // 10 xor 10 = 0
        // 10 xor 20 xor 10 = 10 xor 10 xor 20 = 20

        int res = 0;
        for (int num : nums) {
            res ^= num;
        }
        return res;
    }
}
